{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","noRepetNumber","str","useState","numberOfCastle","setNumberOfCastle","showResult","setShowResult","className","onSubmit","e","preventDefault","numberPlaceToBuild","peak","valley","noDuplicate","filter","val","key","length","i","bind","this","type","placeholder","name","onChange","target","value","Array","from","map","Number","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yQA0FeA,MArFf,WACA,IAAIC,EACAC,EAFW,EAG6BC,mBAAS,GAHtC,mBAGRC,EAHQ,KAGQC,EAHR,OAIqBF,oBAAS,GAJ9B,mBAIRG,EAJQ,KAIIC,EAJJ,KAwCb,OACE,oCACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,oDAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACb,kIAGJ,yBAAKA,UAAU,OACb,yBAAKA,UAAU,aACf,0BAAOC,SA3CS,SAACC,GACzBA,EAAEC,iBACH,IAAIC,EAAqB,EACrBC,GAAO,EACPC,GAAS,EAERC,EAAcd,EAAce,QAAO,SAACC,EAAKC,GAC7C,OAAOD,IAAQhB,EAAciB,EAAI,IAAa,GAAPA,KAGvC,GAAIH,EAAYI,OAAS,EACrB,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAYI,OAAQC,IACpCP,EAAOE,EAAYK,GAAKL,EAAYK,EAAI,IAAML,EAAYK,GAAKL,EAAYK,EAAI,GAC/EN,EAASC,EAAYK,GAAKL,EAAYK,EAAI,IAAML,EAAYK,GAAKL,EAAYK,EAAI,IAEpE,IAATP,IAA6B,IAAXC,GACpBF,IAIVA,IACAP,EAAkBO,GAEdA,EAAqB,GACvBL,GAAc,IAmB2Bc,KAAKC,OACxC,yBAAKd,UAAU,YACb,yBAAKA,UAAU,aACb,2BACIe,KAAK,OACLf,UAAU,gBACVgB,YAAY,qCACZC,KAAK,OACLC,SAzDD,SAAAhB,GACfA,EAAEC,iBACFT,EAAOQ,EAAEiB,OAAOC,MAChB3B,EAAgB4B,MAAMC,KAAK5B,GAAK6B,IAAIC,aA0D5B,yBAAKxB,UAAU,YACb,yBAAKA,UAAU,aACf,4BAAQe,KAAK,SAASf,UAAU,mBAAhC,eAMHF,EAAa,yBAAKE,UAAU,OAC3B,yBAAKA,UAAU,aACb,yBAAKA,UAAU,kBAAf,gBAA6C,mCAASJ,GAAtD,eAEK,MCxEG6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ccf756b1.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\nfunction App() {\nlet noRepetNumber;\nvar str;\nconst [numberOfCastle, setNumberOfCastle] = useState(0)\nconst [showResult, setShowResult] = useState(false)\n\nconst onChange = e => {\n  e.preventDefault();\n  str = (e.target.value);\n  noRepetNumber = Array.from(str).map(Number);\n}\n\nconst findAPlaceToBuild = (e) => {\n  e.preventDefault();\n let numberPlaceToBuild = 1;\n let peak = false; \n let valley = false;\n\nconst noDuplicate = noRepetNumber.filter((val, key)=> {\n  return val !== noRepetNumber[key-1] || key == 0;\n});\n\n  if (noDuplicate.length > 0) {\n      for (var i = 0; i < noDuplicate.length; i++) {\n          peak = noDuplicate[i] > noDuplicate[i - 1] && noDuplicate[i] > noDuplicate[i + 1];\n          valley = noDuplicate[i] < noDuplicate[i - 1] && noDuplicate[i] < noDuplicate[i + 1];\n\n          if (peak !== false || valley !== false) {\n            numberPlaceToBuild++;\n          }\n      }\n  }\n  numberPlaceToBuild++;\n  setNumberOfCastle(numberPlaceToBuild);\n  \n  if (numberPlaceToBuild > 0) {\n    setShowResult(true);\n  }\n}\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <h1>The Castle Company</h1>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <p>To find out the number of places where you can build a castle, please enter a sequence of numbers</p>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n          <form  onSubmit={findAPlaceToBuild.bind(this)}>\n          <div className=\"form-row\">\n            <div className=\"col-md-12\">\n              <input \n                  type=\"text\" \n                  className=\"form-control \" \n                  placeholder=\"Please, enter a sequence of number\"\n                  name=\"name\"\n                  onChange={onChange}\n                  />\n            </div>\n          </div>\n          <div className=\"form-row\">\n            <div className=\"col-md-12\">\n            <button type=\"submit\" className=\"btn btn-primary\">Submit</button>\n            </div>\n          </div>\n            </form>\n          </div>\n        </div>\n        {showResult ? <div className=\"row\">\n          <div className=\"col-md-12\">\n            <div className=\"numberOfCastle\">You can build<span>  {numberOfCastle}</span> castles.</div>\n          </div>\n        </div> : \"\"}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}